// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  followingIds   String[]  @db.ObjectId
  role           UserRole  @default(user)
  compasses      Int       @default(0)
  accounts       Account[]
  posts          Post[]
  comments       Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  uri         String
  title       String
  description String?
  cors        Cors?
  https       Https?
  auth        Auth?
  paid        Paid?
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  likedIds    String[]  @db.ObjectId
  isApproved  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum UserRole {
  admin
  user
}

enum Cors {
  cors
  no_cors
  unknown
}

enum Auth {
  api_key
  o_auth
  user_agent
  x_mashape_key
  none
}

enum Https {
  https
  no_https
}

enum Paid {
  free
  subscription
  paid
}
